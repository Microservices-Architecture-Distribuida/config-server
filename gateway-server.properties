# Configuração do servidor
server.port=8080
eureka.client.service-url.defaultZone=http://localhost:8761/eureka,http://localhost:8762/eureka,http://localhost:8763/eureka

spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

eureka.instance.prefer-ip-address=true
eureka.instance.ip-address=127.0.0.1
eureka.instance.lease-renewal-interval-in-seconds=5
eureka.instance.lease-expiration-duration-in-seconds=30

eureka.client.eureka-server-connect-timeout-seconds=5
eureka.client.eureka-server-read-timeout-seconds=5
eureka.client.registry-fetch-interval-seconds=5
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true


# Circuit Breaker para o serviço de pagamento
resilience4j.circuitbreaker.instances.pagamentoCircuitBreaker.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.pagamentoCircuitBreaker.slidingWindowSize=10
resilience4j.circuitbreaker.instances.pagamentoCircuitBreaker.failureRateThreshold=50
resilience4j.circuitbreaker.instances.pagamentoCircuitBreaker.waitDurationInOpenState=30s
resilience4j.circuitbreaker.instances.pagamentoCircuitBreaker.permittedNumberOfCallsInHalfOpenState=5
resilience4j.circuitbreaker.instances.pagamentoCircuitBreaker.maxWaitDurationInHalfOpenState=10s

# Circuit Breaker para o serviço de pedido
resilience4j.circuitbreaker.instances.pedidoCircuitBreaker.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.pedidoCircuitBreaker.slidingWindowSize=10
resilience4j.circuitbreaker.instances.pedidoCircuitBreaker.failureRateThreshold=50
resilience4j.circuitbreaker.instances.pedidoCircuitBreaker.waitDurationInOpenState=30s
resilience4j.circuitbreaker.instances.pedidoCircuitBreaker.permittedNumberOfCallsInHalfOpenState=5
resilience4j.circuitbreaker.instances.pedidoCircuitBreaker.maxWaitDurationInHalfOpenState=10s


spring.cloud.gateway.routes[0].id=pagamento-servico
spring.cloud.gateway.routes[0].filters=CircuitBreaker=name=pagamentoCircuitBreaker,fallbackUri=forward:/fallback

spring.cloud.gateway.routes[1].id=pedido-servico
spring.cloud.gateway.routes[1].filters=CircuitBreaker=name=pedidoCircuitBreaker,fallbackUri=forward:/fallback